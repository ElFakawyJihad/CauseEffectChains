__ Page de garde

[Page de garde]
_____ _____ _____ _____ _____ _____ _____ _____ _____ _____

Ce document présente un court projet de recherche et d'implémentation d'un oracle de diagnostique automatique de bugs dans le cadre 
du Master 2 IAGL à Lille 1, en France.

__ Sommaire

[Sommaire]

_____ _____ _____ _____ _____ _____ _____ _____ _____ _____


__ Introduction

Les bugs existent depuis toujours dans les programmes informatiques et nuisent à beaucoup de développeurs. Mais qu'est ce qu'un bug? Comment peut-on 
les détecter? Ne pourrait-on pas les réparer automatiquement? A quoi cela sert de les corriger? 

(Problème) Les bugs ont beaucoup des conséquences négatives sur les programes, d'une erreur d'affichage au crash. Cependant il arrive très souvent que 
leurs origines ne soient qu'une toute petite erreur dans le code. Entre autres, une valeur qui a besoin d'un +1, une condition trop faible, un 
paramètre mal initialisé...

(Solution) Pour les détecter, il vaut mieux avoir des tests unitaires pour sécuriser son code. Lorsqu'un test ne fonctionne plus, il faut pratiquer du 
delta-debbugging, qui consiste à retirer toute la partie de code concernée, vérifier si le test passe ou non et retirer un peu moins de code s'il ne 
passe toujours pas et on recommence. Ainsi, l'endroit exact du soucis est isolé et il est possible d'essayer des alternatives pour cette petite partie. 
En automatisant cette simple démarche, il est possible d'avoir un premier programme de détection automatique de bugs.

(Conséquences) L'intérêt d'un tel programme est d'alléger la tâche du développeur. Si les bugs sont souvent simples à corriger, ils prennent énormément 
de temps à debbuger et à trouver. Avoir un oracle qui s'occupe de cette tâche automatiquement serait un gain indéniable.

Nous proposons [NOM DU PROJET], un outil de diagnostic et de réparation automatique de bugs basé sur l'analyse de tests.

_____ _____ _____ _____ _____ _____ _____ _____ _____ _____



__ Algorithme

__ Solution technique

	Notre solution utilise Beanshell et Javaparser. Le premier est un interpreteur de code Java. Le second un parser de code java permet de construire 
	un AST et de modifier des fragments de code. Nous implémentons également l'algorithme de delta-debbuging d'Andreas Zeller.

___ Prérequis

	Pour fonctionner, notre algorithme a besoin d'une méthode "challenge" qui dispose d'un paramètre d'un type donné ainsi qu'une liste d'entrées. Ces
	entrées doivent simuler une execution optimale de la méthode challenge ou d'une exécution défaillante qui provoquera un bug et qui permet au 
	delta-debbuger de le déceler.
	
___ Algorithme

	1. L'interpreteur Beanshell est initialisé avec une liste vide d'éléments de chaine de cause à effet.
	2. La méthode "challenge" est extraite d'un fichier .java sous forme d'une liste de noeuds AST à l'aide d'un visiteur de méthode de Javaparser.
	3. Chaque noeud est modifié :
		3.1. Le type de noeud est vérifié
		3.2. Selon le type de noeud, on appelle le point 3 sur ce noeud ou on passe à la pochaine étape
		3.3. On ajoute un nouveau noeud après le noeud courant qui consiste à ajouter un élément à la chaine de cause à effet avec les informations
			 du noeud courant. (L'état de l'objet courant, son numéro de ligne, et une description spéciale selon sa position dans des boucles).
			 Arrivé à ce niveau de récursivité, cela concerne seulement les déclarations de variables, les expression unaires, les affectations et 
			 les appels de méthode.
	4. On execute dans l'intépréteur Beanshell chaque noeud
	5. On récupère la chaine de cause à effet depuis l'interpreteur
	6. TOUT CE QUI CONCERNE LE DELTA DEBUG


